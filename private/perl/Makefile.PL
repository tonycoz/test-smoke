#! /usr/bin/perl -w
use strict;

use FindBin;
use File::Spec::Functions;

=head1 NAME

Makefile.PL - Create a F<Makefile> to test a fake perl installation

=head1 SYNOPSIS

    $ perl Makefile.PL [--cc compiler] [--mini]

=head1 DESCRIPTION

This program creates a F<Makefile> for a tiny c-program that will help
testing the B<Test::Smoke> software.

It will be called from a shell-script in one of two ways:

=over 4

=item 1. C<< S<perl Makefile.PL> >>

The default case where the compilation of perl is emulated.

=item 2. C<< S<perl Makefile.PL --mini> >>

The case where the creation of perl seems to have failed, but a
miniperl executable is found.

=back

=cut

use Getopt::Long;
my %opt = (
    cc   => 'cc',
    mini => 0,
);
@ARGV = grep !/-des/ && !/-Dusedevel/ => @ARGV;
GetOptions( \%opt,
    'cc|c=s',
    'mini!',
    'ddebugging', # hack, hack, hack
);

if ( $opt{mini} ) {
    $opt{options} = '-DDO_ERROR';
} else {
    $opt{options} = '';
}

my $makefile = sprintf <<'EO_MAKEFILE', $0, @opt{qw( options cc )}, $^X;
# This file is generated by:
#      %s
#      $Id$
#
OPTIONS=%s
CCCMD=%s
FULLPERL = %s

all: compile

minicompile:
	$(CCCMD) 01test.c -o miniperl -DMINI

compile: minicompile
	$(CCCMD) 01test.c -o perl $(OPTIONS)

test-prep:
	cd t && (rm -f perl; ln -s $(FULLPERL) perl)

_test:
	cd t && $(FULLPERL) -MTest::Harness -e 'runtests( @ARGV )' base/*.t

test: test-prep 
	$(MAKE) _test

minitest: test-prep
	cd t && $(FULLPERL) -MTest::Harness -e 'runtests( @ARGV )' base/mini*.t

distclean:
	rm -f perl miniperl */perl
	rm -f *~
	rm -f Makefile
EO_MAKEFILE

my $mf_name = catfile( $FindBin::Bin, 'Makefile' );
local *MAKEFILE;
open MAKEFILE, "> $mf_name" or die "Cannot create '$mf_name': $!";
print MAKEFILE $makefile;
close MAKEFILE or die "Cannot close '$mf_name': $!";
